<?php

namespace MyNamespace;

use Foo\Bar;

abstract class MyClass
    extends MyParentClass
    implements MyInterface
{
    use MyTrait;

    public static function method()
    {
        parent::method();
        new \DateTime();
        new self();
        new static();

        static::method();
        self::method();

        if (isset($var) or FALSE) {
        } elseif (empty($var) and TRUE xor NULL) {
        } else {
        }
    }

    abstract protected function protectedMethod();

    private function privateMethod($a, $b, callable $c)
    {
        while ($a) {
        }

        do {
        } while ($b);

        for ($i = $c; $i < 1; $i++) {
            continue;
        }

        try {
            include 'file';
            include_once 'file2';
            require 'file3';
            require_once 'file4';
        } catch (\Exception $ex) {
            throw new \RuntimeException();
        }

        print 'Hello';
        echo $b instanceof \Exception ? 'Hello' : 'World';

        $x = clone $a;
        yield $a => $b;
    }

    final public function finalMethod()
    {
        switch (1) {
            case 0:
                return function () {};
            default:
                break;
        }
    }
}
